extern void object::CollectUranOre()
{
	bool lookforcells = false; //set to true if you want the grabber to find a new power cell if the current one is low (only works if no recharge buildings are on map). Will be ignored for Subbers.
	bool sendToPost = true; //if set to true, grabber will go the nearest exchange post and report the number of found Uranium ores (if more than one).
	float triggerValue = 0.5; //grabber will go rechare it's Power Cell once it reaches this level
	
	while(true)
	{
		int oreCount = sizeof(radarall(UraniumOre));
		
		Mainteneance(lookforcells,triggerValue);
		if(oreCount > 1) //there's no point in displaying/posting that if derrick is the only source of ore
		{
			message("Number of uranium ores on map: " + oreCount);
			object post = radar(ExchangePost);
			if(sendToPost == true && post != null && load == null) //it dosent make sense for the grabber to report while holding an ore
			{
				goto(space(post.position));
				send("UraniumOnMap",oreCount,20);
			}
		}
		if(load == null)
		{
			retrieveResource(UraniumOre);
			Mainteneance(lookforcells,triggerValue);
		}
		else
		{
			if(category == Subber)
			{
				Mainteneance(lookforcells,triggerValue);
				processResource(NuclearPlant,true);
				deliverResource(BotFactory);
			}
			else
			{
				Mainteneance(lookforcells,triggerValue);
				processResource(NuclearPlant,false);
				deliverResource(BotFactory);
			}
		}
	}
}

void object::retrieveResource(int category)
{
	object resource;
	
	while( (resource = radar(category)) == null )
	{
		message("No UraniumOre found.  Standing by...");
		wait(10);    
	}
	if(canbuild(NuclearPlant) == false)
	{
		resource = radar(category,0,360,0,1000,-1);
	}
	trygoto(resource.position);
	grab();
}

void object::processResource(int category, bool isSubber)
{
	object building;
	
	if(canbuild(NuclearPlant) == false and radar(NuclearPlant) != null) // special case where a mission objective is to gather ore but there's no means of processing it
	{
		object post = radar(ExchangePost);
		trygoto(space(post.position));
		drop();
		wait(1);
		object uranInFront = radar(UraniumOre, 0, 45, 0, 20);
		if(uranInFront != null)
		{
			retrieveResource(FindNextResource(uranInFront).category);
		}
	}
	else
	{
		while( (building = radar(category)) == null )
		{
			message("No NuclearPlant found.  Standing by...");
			wait(10);    
		}
		if(isSubber == true)
		{
			object post = radar(ExchangePost);
			goto(space(post.position));
			drop();
			wait(1);
			object uranInFront = radar(UraniumOre, 0, 45, 0, 20);;
			if(uranInFront != null)
			{
				send("PosX",uranInFront.position.x,100);
				send("PosY",uranInFront.position.y,100);
				send("PosZ",uranInFront.position.z,100);
				//resource = FindNextResource(uranInFront);
			}
		}
		else
		{
			trygoto(building.position);
			drop();
			move(-3);
			wait(3);
			while(isbusy(building))
			{
				wait(1);
			}
			move(1.5);
			grab();
		}
	}
}
void object::deliverResource(int category)
{
	object dest = radar(category);
	
	if(dest == null)
	    goto(space());
	else 
	{
		errmode(0);
		if(goto(space(dest.position)) != 0)
		    goto(space());
		errmode(1);
	}
	    
	drop();
	
	message("NuclearCell delivered.",DisplayInfo);
}

void object::Mainteneance(bool lookforcells, float triggerValue)
{
	int list[], i;
	object power,repair;
	
	i = 0;
	list[i++] = PowerStation;
	list[i++] = PowerCaptor;
	
	errmode(0);
	
	power = radar(list);
	
	if(power == null && lookforcells == true && this.category != Subber)
	{
		int cellList[];
		cellList[0] = PowerCell;
		cellList[1] = NuclearCell;
		object cell = radar(cellList);
		
		if(cell.energyLevel >= energyCell.energyLevel && cell.energyLevel >= triggerValue)
		{
			message("Swapping with better PowerCell/NuclearCell...",DisplayInfo);
			goto(cell.position);
			grab();   
			drop(Behind);
			grab(EnergyCell);  
			drop();
			grab(Behind);
			drop(EnergyCell);
		}
	}
	
	if(power != null && energyCell.energyLevel < triggerValue && energyCell.category != NuclearCell)
	{
		message("Battery low, going to recharge facility", DisplayInfo);
		trygoto(power.position);
		while(energyCell.energyLevel < 1)
		{
			wait(1);
		}
	}
	else if (energyCell.energyLevel < triggerValue && power == null && energyCell.category == PowerCell) //checking if we have power cell so that we wont display this error needlessly
	{
		message("Power Station/Captor not found.", DisplayError);
	}
	else if (energyCell.energyLevel < triggerValue && canbuild(PowerStation) == false && canbuild(PowerCaptor) == false) //can't do canbuild(list), it expects a int value (not list) or category name
	{
		message("Power Station/Captor not accesible in this mission.", DisplayWarning);
	}
	
	repair = radar(RepairCenter);
	
	if(shieldLevel < 0.5)
	{
		message("Structural integritty low, going to Repair Center", DisplayInfo);
		goto(repair.position);
		while(shieldLevel < 1)
		{
			wait(1);
		}
	}
	else if (shieldLevel < 0.5 && radar(repair.category) == null)
	{
		message("Power Station/Captor not found.", DisplayError);
	}
	else if (shieldLevel < 0.5 && canbuild(repair.category) == false)
	{
		message("Power Station/Captor not accesible in this mission.", DisplayWarning);
	}
	
	errmode(1);
}

void object::trygoto(point pos)
{
	errmode(0);
	int tries = 0;
	while (distance(position, pos) > 0) //While we are moving towards destination...
	{
		while (goto(pos) != 0) //How we are handling goto() errors
		{
			if(tries > 2)
			{
				point midPoint;
				midPoint.x = ((position.x + pos.x) / 2);
				midPoint.y = ((position.y + pos.y) / 2);
				midPoint.z = ((position.z + pos.z) / 2);
				goto(midPoint);
				wait(0.5);
				goto(pos, 0, 1);
				break;
			}
			else wait(2);
			tries++;
		}
		errmode(1);
		break;
	}
}
object object::FindNextResource(object uranInFront)
{
	if(uranInFront != null)
	{
		object[] resourceList = radarall(UraniumOre);
		return resourceList[1];
	}
	return radar(UraniumOre);
}
