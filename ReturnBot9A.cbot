extern void object::ReturnBot9A() //A two-parter, this one is to be executed on a Subber once it processes all surface Titanium ore in RB9 mission 1. It will go fetch Uranium ore, take it to the ship and tell the wheeled grabber to process it.
{
	int targetAmount = 2; //change accordingly
	
	object resource = radar(UraniumOre);
	object post = radar(ExchangePost);
	object uranInFront;
	
	while(RefreshList() <= targetAmount)
	{
		if(RefreshList() >= targetAmount)
		{
			message("Reached the quota on Nuclear Cells.", DisplayInfo);
			break;
		}
		if (category != Subber)
		{
			message("Only for Subbers!", DisplayError);
			break;
		}
		Maintenance();
		trygoto(resource.position);
		grab();
		Maintenance();
		goto(space(post.position));
		drop();
		wait(1);
		uranInFront = radar(resource.category, 0, 45, 0, 20);;
		if(uranInFront != null)
		{
			send("PosX",uranInFront.position.x,100);
			send("PosY",uranInFront.position.y,100);
			send("PosZ",uranInFront.position.z,100);
			resource = FindNextResource(uranInFront);
		}
		else
		{
			message("Error while dropping uranium for grabber.", DisplayError);
			break;
		}
		Maintenance();
	}
}
void object::trygoto(point pos)
{
	errmode(0);
	int tries = 0;
	while (distance(position, pos) > 0) //While we are moving towards destination...
	{
		while (goto(pos) != 0) //How we are handling goto() errors
		{
			if(tries > 2)
			{
				point midPoint;
				midPoint.x = ((position.x + pos.x) / 2);
				midPoint.y = ((position.y + pos.y) / 2);
				midPoint.z = ((position.z + pos.z) / 2);
				goto(midPoint);
				wait(0.5);
				goto(pos, 0, 1);
				break;
			}
			else wait(2);
			tries++;
		}
		errmode(1);
		break;
	}
}
void object::Maintenance()
{
	if ( energyCell.category == PowerCell and energyCell.energyLevel < 0.6 )
	{
		object item = radar(PowerStation);
		if ( item != null )
		{
			trygoto(item.position);
			while ( energyCell.energyLevel < 1 )
			{
				wait(1);
			}
		}
	}
}
object object::FindNextResource(object uranInFront)
{
	if(uranInFront != null)
	{
		object[] resourceList = radarall(UraniumOre);
		return resourceList[1];
	}
	return radar(UraniumOre);
}
int object::RefreshList()
{
	object[] list = radarall(NuclearCell);
	object[] trueList;
	
	for(int i = 0; i <= sizeof(list);i++)
	{
		if(i == sizeof(list))
		{
			break;
		}
		if(list[i] != null && list[i].energyLevel == 1)
		{
			trueList[i] = list[i];
		}
	}
	
	return sizeof(trueList);
}