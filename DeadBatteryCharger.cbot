extern void object::DeadBatteryCharger()
{
	int deliveryMode = 1; //0 = deliver battery to the position grabber was at program activation, 1 = put it near the PowerStation/Captor, 2 = go where the PowerCell was before recharge, 3 = go to base, define what is considerd a base object in the variable below
	object baseObject = radar(SpaceShip);
	
	object[] batteryList = radarall(PowerCell);
	point orgPosition = position;
	int i = 0;
	int[] list;
	list[i++] = PowerStation;
	list[i++] = PowerCaptor;
	object power;
	
	if (load != null && load.category == PowerCell && load.energyLevel < 1)
	{
		drop(); //we need to drop the cell because DeliverPowerCell() needs that parameter even if we aren't delivering to where it was
		object cellInFront = radar(PowerCell,0,90,0,10);
		power = radar(list);
		GoToRecharge(power);
		DeliverPowerCell(deliveryMode, orgPosition, power, baseObject,cellInFront.position);
	}
	else if (load != null && load.category != PowerCell)
	{
		message("Invalid object in claw.");
		goto(space());
		drop();
	}
	else
	{
		for(int i = 0; i <= sizeof(batteryList);i++)
		{
			if (i == sizeof(batteryList))
			{
				message("No batteries in need of recharge.");
				break;
			}
			if (batteryList[i].energyLevel < 1)
			{
				trygoto(batteryList[i].position);
				grab();
				power = radar(list);
				GoToRecharge(power);
				DeliverPowerCell(deliveryMode, orgPosition, power, baseObject,batteryList[i].position);
			}
		}
	}
}

void object::GoToRecharge(object power)
{
	goto(power.position);
	while(load.energyLevel < 1)
	{
		wait(1);
	}
}
void object::trygoto(point pos)
{
	errmode(0);
	int tries = 0;
	while (distance(position, pos) > 0) //While we are moving towards destination...
	{
		while (goto(pos) != 0) //How we are handling goto() errors
		{
			if(tries > 2)
			{
				point midPoint;
				midPoint.x = ((position.x + pos.x) / 2);
				midPoint.y = ((position.y + pos.y) / 2);
				midPoint.z = ((position.z + pos.z) / 2);
				goto(midPoint);
				wait(1);
				goto(pos, 0, 1);
				break;
			}
			else wait(2);
			tries++;
		}
		errmode(1);
		break;
	}
}
void object::DeliverPowerCell(int deliveryMode, point botOrgPosition, object station, object baseObject, point batteryOrgPosition)
{
	if(deliveryMode == 0) //bot's original position
	{
		trygoto(botOrgPosition);
		goto(space());
		drop();
		message("PowerCell charged and delivered to " + botOrgPosition, DisplayInfo);
	}
	else if(deliveryMode == 1) //leave near the PowerStation/PowerCaptor
	{
		trygoto(space(station.position));
		drop();
		message("PowerCell charged and delivered to " + station.category + " at " + station.position, DisplayInfo);
	}
	else if(deliveryMode == 2) //leave at the cell's original position
	{
		trygoto(batteryOrgPosition);
		goto(space());
		drop();
		message("PowerCell charged and delivered to " + batteryOrgPosition, DisplayInfo);
	}
	else if(deliveryMode == 3) //go to base
	{
		if(baseObject.category == SpaceShip)
		{
			goto(space(baseObject.position,0,10));
		}
		else
		{
			goto(space(baseObject.position));
		}
		drop();
		message("PowerCell charged and delivered to base(" + baseObject.category + ") at " + baseObject.position, DisplayInfo);
	}
	else
	{
		message("Incorrect delivery mode parameter.", DisplayError);
	}
}