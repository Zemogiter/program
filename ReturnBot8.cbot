extern void object::ReturnBot8() //program made for 2nd mission in the "Back to Opheron" chapter, makes bots do stuff while being mindfull of the storms
{
	object tSpot = radar(TitaniumSpot);
	object uSpot = radar(UraniumSpot);
	object cube = radar(Titanium);
	object worm = radar(AlienWorm);
	object egg = radar(AlienEgg);
	
	if(category == WingedGrabber)
	{
		if (tSpot != null)
		{
			goto(cube.position);
			grab();
			FollowTheStormPatch(tSpot);
			wait(1);
			move(-2);
			drop();
			message("Cube dropped at " + tSpot.category, DisplayInfo);
		}
		else if (uSpot != null)
		{
			goto(cube.position);
			grab();
			FollowTheStormPatch(uSpot);
			wait(1);
			move(-2);
			drop();
			message("Cube dropped at " + uSpot.category, DisplayInfo);
		}
	}
	else if(category == WingedBuilder)
	{
		if (search(Titanium,tSpot.position) != null)
		{
			FollowTheStormPatch(tSpot);
			wait(1);
			move(-2);
			build(Derrick);
		}
		else if (search(Titanium,uSpot.position) != null)
		{
			FollowTheStormPatch(uSpot);
			wait(1);
			move(-2);
			build(Derrick);
		}
	}
	else if(category == WingedOrgaShooter or category == LeggedOrgaShooter)
	{
		FollowTheStormPatch(worm);
		while(worm !=null or egg != null)
		{
			float dis = distance(position,worm.position); 
			float dif = worm.position.z-position.z;
			float ang = atan(dif/dis); 
			
			if(altitude == 0)
			    ang -= pitch;
			
			float dir = direction(worm.position);
			
			if(dis < 40 and abs(ang) < 20 and abs(dir) < 112.5)
			    turn(dir);
			else
			    motor(1-dir/45,1+dir/45);
			
			dis = distance(position,worm.position);  
			dif = worm.position.z-position.z;
			ang = atan(dif/dis)-pitch; 
			
			aim(ang);
			
			dir = direction(worm.position);
			
			if(dis < 40  and abs(ang) < 20 and abs(dir) < 5 and LOS(worm,dis) == true)
			    fire(0.1); 
		}
	}
}
void object::FollowTheStormPatch(object target)
{
	object[] PClist = radarall(PowerCaptor);
	object[] PClistTarget;
	for(int i = 0; i < sizeof(PClist); i++)
	{
		if(PClist[i].position == CalculateMidpoint(target.position)) //if a PowerCaptor is on the way
		{
			message("Debug - added " + PClist[i].position + " to list of PowerCaptors to reach the destination.");
			PClistTarget[i] = PClist[i];
		}
	}
	for(int i = 0; i < sizeof(PClistTarget); i++)
	{
		trygoto(PClistTarget[i].position);
	}
}
void object::trygoto(point pos)
{
	errmode(0);
	int tries = 0;
	while (distance(position, pos) > 0) //While we are moving towards destination...
	{
		
		while (goto(pos) != 0) //How we are handling goto() errors
		{
			if(tries > 2)
			{
				goto(CalculateMidpoint(pos));
				wait(0.5);
				goto(pos, 0, 1);
				break;
			}
			else wait(2);
			tries++;
		}
		errmode(1);
		break;
	}
}
point object::CalculateMidpoint(point pos)
{
	point midPoint;
	midPoint.x = ((position.x + pos.x) / 2);
	midPoint.y = ((position.y + pos.y) / 2);
	midPoint.z = ((position.z + pos.z) / 2);
	return midPoint;
}
boolean object::LOS(object objTarget, float fltDist)
{
	if(objTarget == null) return false;    //if it doesn't exist you can't see it
	ipf(10000);                            //Zip through the code AFAP
	point pntCheck;
	point pntScale;
	point pntHigh;
	point pntPosAlt;
	float fltDistance;
	
	pntPosAlt = position;
	fltDistance = distance(position, objTarget.position);
	
	//Calculate the change per unit... "3d slope"
	pntScale.x = (objTarget.position.x - position.x)/fltDistance;
	pntScale.y = (objTarget.position.y - position.y)/fltDistance;
	pntScale.z = (objTarget.position.z - position.z)/fltDistance;
	
	//loop until you have reached the location of the target
	for(int I=fltDist; I < fltDistance; I=I+fltDist)
	{
		pntCheck.x = pntPosAlt.x + (pntScale.x * I);
		pntCheck.y = pntPosAlt.y + (pntScale.y * I);
		pntCheck.z = pntPosAlt.z + (pntScale.z * I);
		
		//see if the "line of site" that is calculated
		//is above or below the ground
		if(pntCheck.z < topo(pntCheck)) return false;
	}
	return true;
}