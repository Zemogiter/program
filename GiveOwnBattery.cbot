extern void object::GiveOwnBattery()
{
	int[] list;
	int i = 0;
	
	list[i++] = PracticeBot;
	list[i++] = WheeledGrabber;
	list[i++] = TrackedGrabber;
	list[i++] = WingedGrabber;
	list[i++] = LeggedGrabber;
	list[i++] = WheeledSniffer;
	list[i++] = TrackedSniffer;
	list[i++] = WingedSniffer;
	list[i++] = LeggedSniffer;
	list[i++] = WheeledShooter;
	list[i++] = TrackedShooter;
	list[i++] = WingedShooter;
	list[i++] = LeggedShooter;
	list[i++] = WheeledOrgaShooter;
	list[i++] = TrackedOrgaShooter;
	list[i++] = WingedOrgaShooter;
	list[i++] = LeggedOrgaShooter;
	list[i++] = Recycler;
	list[i++] = Thumper;
	list[i++] = Shielder;
	list[i++] = PhazerShooter;
	list[i++] = WheeledBuilder;
	list[i++] = TrackedBuilder;
	list[i++] = WingedBuilder;
	list[i++] = LeggedBuilder;
	
	object[] botList = radarall(list);
	int listSize = sizeof(botList);
	
	for(int i = 0; i <= listSize;i++)
	{
		if (i == listSize)
		{
			message("No bots in need of battery switch.");
			break;
		}
		if(botList[i].energyCell != null && botList[i].energyCell.energyLevel < 0.3)
		{
			message("Found a " + botList[i].category + " that is low on power, moving there.");
			trygoto(GetBotFront(botList[i]));
			turn(direction(botList[i].position)-180);
			message("Sacrificial bot in place, ready for battery transfer");
		}
		else if(botList[i].energyCell == null)
		{
			message("Found a " + botList[i].category + " that has no power cell, moving there.");
			trygoto(GetBotFront(botList[i]));
			turn(direction(botList[i].position)-180);
			message("Sacrificial bot in place, ready for battery transfer");
		}
	}
	
	
}
void object::trygoto(point pos)
{
	errmode(0);
	int tries = 0;
	while (distance(position, pos) > 0) //While we are moving towards destination...
	{
		temperatureGuard(); //...we're checking if the flying bot's engine is overheating
		while (goto(pos) != 0) //How we are handling goto() errors
		{
			if(tries > 2)
			{
				point midPoint;
				midPoint.x = ((position.x + pos.x) / 2);
				midPoint.y = ((position.y + pos.y) / 2);
				midPoint.z = ((position.z + pos.z) / 2);
				goto(midPoint);
				wait(1);
				goto(pos, 0, 1);
				break;
			}
			else wait(2);
			tries++;
		}
		errmode(1);
		break;
	}
}
void object::temperatureGuard()        //land if temperature is to high
{
	point loc;
	int counter;
	
	if(temperature > 0.7) 
	{
		message("Debug - temperatureGuard() active");
		jet(0);
		
		while(topo(position) < 0)         //find somewhere to land
		{                                                         
			counter = 0;
			while(counter < 36)        //part made by sclover@abac.com
			{
				loc.x = (cos(orientation) * 20.0) + position.x;
				loc.y = (sin(orientation) * 20.0) + position.y;
				loc.z = position.z + 5.0;
				
				if(topo(loc) >= -0.7)
				{
					move(20);
					break;
				}
				turn(10);
				counter++;
			}
			
			if(topo(position) >= 0)
			{
				break;
			}
			motor(1, 1);
			wait(2);
		}
		
		motor(0, 0);        //stop and land
		jet( -1 );
		
	}
}
point object::GetBotFront(object bot)
{
	float angle = bot.orientation;
	float radius = 2.5;
	point botFront;
	botFront.x = bot.position.x + radius * cos(angle);
	botFront.y = bot.position.y + radius * sin(angle);
	
	produce(botFront,angle,WayPoint);
	
	return botFront;
}