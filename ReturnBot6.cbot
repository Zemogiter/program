extern void object::ReturnBot6() //A program to support the shooter's convoy on Crystalium's 3rd mission, it tells the grabber to get a titanium cube for charging the escort, including placing the cube at nearest power spot
{
	object shooter = radar(TrackedOrgaShooter);
	object spot = radar(PowerSpot);
	float dist = distance(position, AyyCheck());
	object power = radar(PowerStation,0,360,0,50);
	
	if( category != TrackedGrabber)
	{
		message("This program is really designed for tracked grabbers in mind.", DisplayError);
		return;
	}
	if (load != null && load.category != Titanium)
	{
		goto(space());
		drop();
		MainLoop(dist,spot,power,shooter);
	}
	else if (load != null && load.category == Titanium)
	{
		MainLoop(dist,spot,power,shooter);
	}
	else
	{
		MainLoop(dist,spot,power,shooter);
	}
}
void object::MainLoop(float dist,object spot,object power,object shooter)
{
	while(true)
	{
		if(load == null && dist > 50 && spot == null) //if nothing in claw, aliens are far away from grabber, no PowerSpot exists on map - grabber will get a new cube from base and return to the escort
		{
			point escortLocation = position;
			Mainteneance();
			while (radar(Titanium) == null)
			{
				message("Waiting for the titanium vube to be produced");
				wait(30);
			}
			object cube = radar(Titanium,0,360,0,1000,-1);
			trygoto(cube.position);
			grab();
			Mainteneance();
			trygoto(escortLocation);
			if(distance(position,shooter.position) < 15) //bot fount it's escort at the original position
			{
				StickToNextBot();
			}
			else //escort moved on without the grabber :(
			{
				while(distance(position,shooter.position) > 15)
				{
					trygoto(shooter.position);
				}
				StickToNextBot();
			}
		}
		else if(load == null && power != null && distance(position,power.position) < 45) //grabber is just joining the escort
		{
			Mainteneance();
			object cube = radar(Titanium,0,360,0,1000,-1);
			trygoto(cube.position);
			grab();
			Mainteneance();
			while (distance(position, shooter.position) > 10)
			{
				trygoto(shooter.position);
			}
			StickToNextBot();
		}
		else if(load != null && load.category == Titanium && power != null && distance(position,power.position) < 45) //as above, but bot has the cube already
		{
			Mainteneance();
			while (distance(position, shooter.position) > 10)
			{
				trygoto(shooter.position);
			}
			StickToNextBot();
		}
		else
		{
			StickToNextBot();
		}
	}
}
point object::AyyCheck()
{
	object alien = radar(AlienSpider);
	if(alien == null) 
	  return new point(9999,9999,999); 
	else
	  return alien.position; 
}
void object::trygoto(point pos)
{
	errmode(0);
	int tries = 0;
	while (distance(position, pos) > 0) //While we are moving towards destination...
	{
		while (goto(pos) != 0) //How we are handling goto() errors
		{
			if(tries > 2)
			{
				point midPoint;
				midPoint.x = ((position.x + pos.x) / 2);
				midPoint.y = ((position.y + pos.y) / 2);
				midPoint.z = ((position.z + pos.z) / 2);
				goto(midPoint);
				wait(0.5);
				goto(pos, 0, 1);
				break;
			}
			else wait(2);
			tries++;
		}
		errmode(1);
		break;
	}
}
void object::Mainteneance()
{
	object power = radar(PowerStation);
	errmode(0);
	if(energyCell.energyLevel < 0.6 && energyCell.category != NuclearCell)
	{
		message("Battery low, going to recharge facility", DisplayInfo);
		goto(power.position);
		while(energyCell.energyLevel < 1)
		{
			wait(1);
		}
	}
	else if (power == null && energyCell.category == PowerCell) //checking if we have power cell so that we wont display this error needlessly
	{
		message("Power Station/Captor not found.", DisplayError);
	}
	errmode(1);
}
void object::StickToNextBot()
{
	object target, facility, spot;
	int list[], facs[], i;
	float tp, mp;
	
	i = 0;
	list[i++] = TrackedGrabber;
	list[i++] = WheeledGrabber;
	list[i++] = TrackedBuilder;
	list[i++] = WheeledBuilder;
	list[i++] = TrackedOrgaShooter;
	list[i++] = WheeledOrgaShooter;
	list[i++] = TrackedSniffer;
	list[i++] = WheeledSniffer;
	
	i = 0;
	facs[i++] = RepairCenter;
	facs[i++] = PowerStation;
	
	target = radar(list,0,60,0,10);
	
	while(target != null)
	{
		facility = radar(facs,0,135,2,5);
		spot = radar(PowerSpot);
		
		if(facility != null and distance(position,target.position) < 10)
		{
			turn(direction(facility.position));
			motor(0.7,0.7);
			while(distance(position,facility.position) > 1) wait(0.02);
			motor(0,0);
			turn(direction(target.position));
		}
		else if(spot != null and load != null and load.category == Titanium and SpotCheck(spot) == false and search(TrackedSniffer, spot.position, 0, 10) == null)
		{
			goto(spot.position);
			wait(1); //this is needed, otherwise move() throws an error
			move(-2); //moving a little back so that cube will land precisely on PowerSpot
			drop();
			goto(target.position);
		}
		else if(distance(position,target.position) > 5 or (abs(direction(target.position)) > 45 and distance(position,target.position) > 3))
		{
			mp = 1;
			if(direction(target.position) > 2)
			{
				tp = direction(target.position) / 60;
				motor (mp-0.4*tp, mp+0.4*tp);
			}
			else if(direction(target.position) < -2)
			{
				tp = -direction(target.position) / 60;
				motor (mp+0.4*tp, mp-0.4*tp);
			}
			else
			{
				motor (mp, mp);
			}
		}
		else
		{
			motor(0,0);
		}
	}
	message("No bot found", DisplayWarning);
}
bool object::SpotCheck(object spot) //return false if no titanium cube is near PowerSpot
{
	object cubeAtSpot = search(Titanium,spot.position,0,5);
	if (cubeAtSpot == null)
	{
		return false;
	}
	return true;
}