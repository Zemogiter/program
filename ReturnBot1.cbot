extern void object::ReturnBot1() //a Bot Factory management program
{
	int botToBuild = TrackedSniffer; // change accordingly
	bool riskTaking = false; //change to true if you want the grabber to make a Nuclear Cell for the newly constructed bot
	bool ignoreShip = false;
	
	object botFactory = radar(BotFactory);
	object cube = radar(Titanium);
	object ship = radar(SpaceShip);
	
	int list[], i;
	i = 0;
	list[i++] = WingedGrabber;
	list[i++] = TrackedGrabber;
	list[i++] = WheeledGrabber;
	list[i++] = LeggedGrabber;
	list[i++] = WingedBuilder;
	list[i++] = TrackedBuilder;
	list[i++] = WheeledBuilder;
	list[i++] = LeggedBuilder;
	list[i++] = PracticeBot;
	list[i++] = TargetBot;
	list[i++] = WingedShooter;
	list[i++] = TrackedShooter;
	list[i++] = WheeledShooter;
	list[i++] = LeggedShooter;
	list[i++] = WingedOrgaShooter;
	list[i++] = TrackedOrgaShooter;
	list[i++] = WheeledOrgaShooter;
	list[i++] = LeggedOrgaShooter;
	list[i++] = WingedSniffer;
	list[i++] = TrackedSniffer;
	list[i++] = WheeledSniffer;
	list[i++] = LeggedSniffer;
	list[i++] = Thumper;
	list[i++] = PhazerShooter;
	list[i++] = Recycler;
	list[i++] = Shielder;
	list[i++] = Subber;
	
	if (botFactory != null and isbusy(botFactory)) //first we check if BotFactory is already busy
	{
		message("Closest BotFactory already at work, going to grab the power source/move the battery in claw to BotFactory.");
		PowerHandler(riskTaking);
		trygoto(GetFactoryFront(botFactory));
		turn(direction(botFactory.position));
		while(isbusy(botFactory))
		{
			wait(1);
		}
		drop();
		GetOutOfTheWay(ship,botFactory,ignoreShip);
	}
	else if(search(list,botFactory.position,0,4) != null) //then we check if there is a newly made bot in need of a battery
	{
		message("A newly made bot awaits a power source, moving.");
		PowerHandler(riskTaking);
		trygoto(GetFactoryFront(botFactory));
		turn(direction(botFactory.position));
		drop();
		GetOutOfTheWay(ship,botFactory,ignoreShip);
	}
	else if (botFactory != null and search(Titanium,botFactory.position,0,4) != null) //if there is a cube in the BotFactory
	{
		message("Cube in the building, sending signal to construct " + botToBuild + " and going to get the power source.");
		factory(botToBuild);
		PowerHandler(riskTaking);
		trygoto(GetFactoryFront(botFactory));
		turn(direction(botFactory.position));
		while(isbusy(botFactory))
		{
			wait(1);
		}
		drop();
		GetOutOfTheWay(ship,botFactory,ignoreShip);
	}
	else if (botFactory != null and search(Titanium,botFactory.position,0,5) == null) //if there is no cube in the BotFactory
	{
		message("No cube in the building, moving there.");
		if(load == null)
		{
			trygoto(cube.position);
			grab();
			wait(1);
			if(load != null and load.category != Titanium) //if grabber has a incorrect item
			{
				message("Grabber picked up the wrong item, correcting.");
				goto(space());
				drop();
				trygoto(cube.position);
				grab();
			}
		}
		else if (load != null and load.category != Titanium)
		{
			goto(space());
			drop();
			trygoto(cube.position);
			grab();
		}
		goto(botFactory.position);
		drop();
		move(-3);
		factory(botToBuild);
		PowerHandler(riskTaking);
		trygoto(GetFactoryFront(botFactory));
		turn(direction(botFactory.position));
		while(isbusy(botFactory))
		{
			wait(1);
		}
		drop();
		GetOutOfTheWay(ship,botFactory,ignoreShip);
	}
	else if (botFactory == null) //waits for BotFactory to be constructed
	{
		while(radar(BotFactory) == null)
		{
			message("No BotFactory found, waiting.");
			wait(20);
		}
	}
}
void object::PowerHandler(bool riskTaking)
{
	object make, power, cube;
	object recharge = radar(PowerStation);
	int i = 0;
	int[] powerList;
	powerList[i++] = PowerCell;
	powerList[i++] = NuclearCell;
	power = radar(powerList);
	
	if (load != null && (load.category == PowerCell or load.category == NuclearCell))
	{
		return;
	}
	if (power != null && power.category == PowerCell && power.energyLevel < 1 && recharge != null) //closest Power Cell needs to be charged
	{
		goto(power.position);
		grab();
		if(load.category == PowerCell && load.energyLevel < 1 && recharge != null)
		{
			goto(recharge.position);
			while(load.energyLevel < 1)
			{
				wait(1);
			}
		}
	}
	else if(power == null) //no cell found
	{
		message("No PowerCell/NuclearCell found, moving to make one.");
		if (riskTaking == true)
		{
			object uran = radar(UraniumOre);
			object atomic = radar(NuclearPlant);
			trygoto(uran.position);
			grab();
			trygoto(atomic.position);
			drop();
			move(-3);
			while(isbusy(atomic))
			{
				wait(1);
			}
			move(2);
			grab();
		}
		else
		{
			while(radar(Titanium) == null)
			{
				message("No cube to process into PowerCell, waiting");
				wait(20);
			}
			cube = radar(Titanium);
			goto(cube.position);
			grab();
			make = radar(PowerPlant);
			while(make == null)
			{
				message("No PowerPlant found, waiting");
				wait(20);
			}
			goto(make.position);
			drop();
			wait(2);
			while(isbusy(make))
			{
				wait(1);
			}
			grab();
		}
	}
	else
	{
		trygoto(power.position);
		grab();
	}
}
void object::trygoto(point pos)
{
	errmode(0);
	int tries = 0;
	while (distance(position, pos) > 0) //While we are moving towards destination...
	{
		while (goto(pos) != 0) //How we are handling goto() errors
		{
			if(tries > 2)
			{
				point midPoint;
				midPoint.x = ((position.x + pos.x) / 2);
				midPoint.y = ((position.y + pos.y) / 2);
				midPoint.z = ((position.z + pos.z) / 2);
				goto(midPoint);
				wait(1);
				goto(pos, 0, 1);
				break;
			}
			else wait(2);
			tries++;
		}
		errmode(1);
		break;
	}
}
point object::GetFactoryFront(object botFactory) // returns a point in front of the BotFactory, grabber goes there instead of the building itself, preventing issues with constantly bumping into it (or the bot inside it) or clipping trough the building's gate since it's not a solid object, huge thanks to tomaszkax86 for providing a solution 
{
	float angle = botFactory.orientation;
	float radius = 5;
	point factoryFront;
	factoryFront.x = botFactory.position.x + radius * cos(angle);
	factoryFront.y = botFactory.position.y + radius * sin(angle);
	
	//produce(factoryFront,botFactory.orientation,WayPoint);
	
	return factoryFront;
}
void object::GetOutOfTheWay(object ship, object botFactory, bool ignoreShip)
{
	if (ship != null and ignoreShip == false)
	{
		goto(space(ship.position,0,10));
	}
	else
	{
		goto(space(botFactory.position));
	}
}