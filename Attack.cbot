extern void object::Attack()
{
	bool gotoMode = false; // set to true if you want the bot to use goto() instead of move() when going to engage the enemy
	bool shootTargets = true; // if false, shooter will not attack TargetBots
	
	ipf(800);
	
	int cat[];                
	cat[0] = AlienAnt;    
	cat[1] = AlienWorm;  
	cat[2] = AlienWasp; 
	cat[3] = AlienSpider;
	cat[4] = AlienEgg;
	if(this.category == PhazerShooter)
	{
		cat[6] = AlienQueen;
	}
	if(radar(TargetBot) != null && shootTargets == true)
	{
		cat[7] = TargetBot;
	}
	if(radar(Any,0,360,0,1000,1,FilterEnemy) != null)
	{
		object enemyBot = radar(Any,0,360,0,1000,1,FilterEnemy);
		cat[8] = enemyBot.category;
	}
	
	object target;
	
	float dir;
	float dis;
	float dif;
	float ang;
	
	boolean hot = false;
	
	if(search(BotFactory,position,0,4) != null) // if the bot is fresh from factory, we have to move it away
	{
		object house = radar(BotFactory);
		turn(direction(house.position));
		move(4);
	}
	
	if((target = radar(cat)) == null)
	{
		Return();
	}
	
	while((target = radar(cat)) != null)
	{
		if(temperature > 0.8)
		    hot = true;
		if(temperature < 0.2)
		    hot = false;
		
		if(hot and topo(position) > 1)
		{
			temperatureGuard();
		}
		else
		{
			dis = distance(position,target.position);  
			dif = target.position.z-position.z;
			ang = atan(dif/(dis-5)); 
			
			jet(1-(ang/-20));  
		}
		
		dis = distance(position,target.position); 
		dif = target.position.z-(position.z+1.5);
		ang = atan(dif/dis); 
		
		if(altitude == 0)
		    ang -= pitch;
		
		dir = direction(target.position);
		if(gotoMode == false)
		{
			if(dis < 40 and abs(ang) < 20 and abs(dir) < 112.5)
			    {
				     turn(dir);
				    }
			    else
			    {
				     motor(1-dir/45,1+dir/45);
				    }
		}
		else
		{
			goto(space(target.position));
			turn(direction(target.position));
		}
		   
		dir = direction(target.position);
		dis = distance(position,target.position);  
		dif = target.position.z-(position.z+1.5);
		ang = atan(dif/dis)-pitch; 
		
		aim(ang);
		
		if(dis < 50  and abs(ang) < 20 and abs(dir) < 5 and LOS(target,dis) == true and target.dead == false)
		{
			fire(0.1); 
		}
		if(dis > 40)
		{
			maint();
		}
		if((target = radar(cat)) == null)
		{
			Return();
		}  
	}
}

void object::maint()
{
	if(energyCell.energyLevel < 0.35 && energyCell.category != NuclearCell)
	{
		int list[], i;
		object power,repair;
		
		i = 0;
		list[i++] = PowerStation;
		list[i++] = PowerCaptor;
		
		errmode(0);
		
		power = radar(list);
		
		if(power != null)
		{
			goto(power.position,5);
			
			while(energyCell.energyLevel < 1)
			    wait(1);
		}
		else
		{
			object base = radar(BotFactory);
			message("No recharge facility found, going to the base for power cell replacement.", DisplayWarning);
			goto(base.position);
			message("Reached the base, waiting for new power cell");
			float powerAtArrival = energyCell.energyLevel;
			while(energyCell.energyLevel <= powerAtArrival)
			{
				wait(1);
			}
		}
	}
	
	if(shieldLevel < 0.45)
	{
		object rep = radar(RepairCenter);
		object bot = radar(Shielder);
		
		if(rep != null)
		{
			goto(rep.position,5);
			
			while(shieldLevel < 1)
			    wait(1);
		}
		else if(rep == null and bot != null)
		{
			goto(space(bot.position),5);
			
			while(shieldLevel < 1)
			    wait(1);
		}
	}
}

boolean object::LOS(object objTarget, float fltDist)
{
	if(objTarget == null) return false;    //if it doesn't exist you can't see it
	ipf(10000);                            //Zip through the code AFAP
	point pntCheck;
	point pntScale;
	point pntHigh;
	point pntPosAlt;
	float fltDistance;
	
	pntPosAlt = position;
	fltDistance = distance(position, objTarget.position);
	
	//Calculate the change per unit... "3d slope"
	pntScale.x = (objTarget.position.x - position.x)/fltDistance;
	pntScale.y = (objTarget.position.y - position.y)/fltDistance;
	pntScale.z = (objTarget.position.z - position.z)/fltDistance;
	
	//loop until you have reached the location of the target
	for(int I=fltDist; I < fltDistance; I=I+fltDist)
	{
		pntCheck.x = pntPosAlt.x + (pntScale.x * I);
		pntCheck.y = pntPosAlt.y + (pntScale.y * I);
		pntCheck.z = pntPosAlt.z + (pntScale.z * I);
		
		//see if the "line of site" that is calculated
		//is above or below the ground
		if(pntCheck.z < topo(pntCheck)) return false;
	}
	return true;
}

void object::temperatureGuard()        //land if temperature is to high
{
	point loc;
	int counter;
	
	if(temperature > 0.6) 
	{
		jet(0);
		
		while(topo(position) < 0)         //find somewhere to land
		{                                                         
			counter = 0;
			while(counter < 36)        //part made by sclover@abac.com
			{
				loc.x = (cos(orientation) * 20.0) + position.x;
				loc.y = (sin(orientation) * 20.0) + position.y;
				loc.z = position.z + 5.0;
				
				int cat[];                
				cat[0] = AlienAnt;    
				cat[1] = AlienWorm;  
				cat[2] = AlienWasp; 
				cat[3] = AlienSpider;
				cat[4] = AlienEgg;
				cat[6] = AlienQueen;
				
				if(radar(TargetBot) != null)
				{
					cat[7] = TargetBot;
				}
				
				object enemy = radar(cat);
				
				if(distance(position,enemy.position) < 20)
				{
					message("Enemy too close, gotta go.", DisplayWarning);
					object ship = radar(SpaceShip);
					goto(ship.position);
				}
				
				if(topo(loc) >= -0.7)
				{
					move(20);
					break;
				}
				turn(10);
				counter++;
			}
			
			if(topo(position) >= 0)
			{
				message("Error while looking for dry land", DisplayError);
				break;
			}
			motor(1, 1);
			wait(2);
		}
		
		motor(0, 0);        //stop and land
		jet( -1 );
		
	}
}

void object::trygoto(point pos)
{
	errmode(0);
	int tries = 0;
	while (distance(position, pos) > 0) //While we are moving towards destination...
	{
		temperatureGuard(); //...we're checking if the flying bot's engine is overheating
		while (goto(pos) != 0) //How we are handling goto() errors
		{
			if(tries > 2)
			{
				point midPoint;
				midPoint.x = ((position.x + pos.x) / 2);
				midPoint.y = ((position.y + pos.y) / 2);
				midPoint.z = ((position.z + pos.z) / 2);
				goto(midPoint);
				wait(0.5);
				goto(pos, 0, 1);
				break;
			}
			else wait(2);
			tries++;
		}
		errmode(1);
		break;
	}
}
void object::Return()
{
	object ship = radar(SpaceShip);
	if(ship != null)
	{
		message("No hostiles on the map, going to the ship.");
		goto(ship.position);
		takeoff(ship);
	}
	else
	{
		message("No hostiles on the map, going to the base");
		ship = radar(BlueFlag);
		goto(ship.position);
	}
}